using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Security.Principal;
using System.Text;

namespace ProcessEnumeration
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Dictionary<string, object>> processInfoList = new List<Dictionary<string, object>>();

            // Get a list of all running processes on the system
            Process[] processes = Process.GetProcesses();

            // Iterate through the list of processes and gather information about each one
            foreach (Process process in processes)
            {
                try
                {
                    // Gather information about the process and store it in a dictionary
                    Dictionary<string, object> processInfo = GatherProcessInfo(process);

                    // Add the process information to the list
                    processInfoList.Add(processInfo);
                }
                catch (Exception e)
                {
                    // An error occurred while gathering information about the process
                    Console.WriteLine("Error: Failed to gather information about process {0}. Reason: {1}",
                        process.ProcessName, e.Message);
                }
            }

            // Print the gathered information to the console
            foreach (Dictionary<string, object> processInfo in processInfoList)
            {
                PrintProcessInfo(processInfo);
            }
        }

        static Dictionary<string, object> GatherProcessInfo(Process process)
        {
            Dictionary<string, object> processInfo = new Dictionary<string, object>();

            // Add the process properties to the dictionary
            processInfo.Add("Process name", process.ProcessName);
            processInfo.Add("Process ID", process.Id);
            processInfo.Add("Process start time", process.StartTime);
            processInfo.Add("Process privileged processor time", process.PrivilegedProcessorTime);
            processInfo.Add("Process total processor time", process.TotalProcessorTime);
            processInfo.Add("Process virtual memory size", process.VirtualMemorySize64);
            processInfo.Add("Process private memory size", process.PrivateMemorySize64);
            processInfo.Add("Process thread count", process.Threads.Count);

            // Check if the AMSI module is loaded in the process
            bool isAmsiLoaded = false;
            foreach (ProcessModule module in process.Modules)
            {
                if (module.ModuleName == "amsi.dll")
                {
                    isAmsiLoaded = true;
                    break;
                }
            }
            processInfo.Add("AMSI loaded", isAmsiLoaded);

            processInfo.Add("Process architecture", Environment.Is64BitProcess ? "64-bit" : "32-bit");

            // Check the integrity level of the process
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            processInfo.Add("Integrity level", principal.GetIntegrityLevel());

            // Check the privilege level of the current process
            processInfo.Add("Privilege level", principal.IsInRole(WindowsBuiltInRole.Administrator) ? "Administrator" : "User");

            return processInfo;
        }

        static void PrintProcessInfo(Dictionary<string, object> processInfo)
        {
            StringBuilder sb = new StringBuilder();

            foreach (KeyValuePair<string, object> info in processInfo)
            {
                sb.AppendFormat("{0}: {1}\t", info.Key, info.Value);
            }

            Console.WriteLine(sb.ToString());
        }
    }
}
